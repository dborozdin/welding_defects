# Python In-built packages
from pathlib import Path
import PIL
from ultralytics import YOLO
import os
from os import listdir
from os.path import isfile, join

# External packages
import streamlit as st

# Local Modules
import settings

# Setting page layout
st.set_page_config(
    page_title="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Main page heading
st.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤")

# Sidebar
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏")

confidence = float(st.sidebar.slider(
    "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (confidence), %", 25, 100, 40)) / 100

model_path = Path(settings.DETECTION_MODEL)

# Load Pre-trained ML Model
def load_model(model_path):
    model = YOLO(model_path)
    return model
    
try:
    model = load_model(model_path)
except Exception as ex:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {model_path}")
    st.error(ex)

st.sidebar.header("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

demo_files = sorted([os.path.join(settings.IMAGES_DIR, f) for f in os.listdir(settings.IMAGES_DIR) if 
    os.path.isfile(os.path.join(settings.IMAGES_DIR, f))])
    
demo_files_cnt = int(st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–º–æ-—Ñ–∞–π–ª–æ–≤", 1, len(demo_files), 1)) 

source_imgs = None
# If image is selected

source_imgs = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã...", type=("jpg", "jpeg"), accept_multiple_files=True)

col1, col2 = st.columns(2)

uploaded_images= []
with col1:
    try:
        caption= "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        if source_imgs==None or len(source_imgs)==0:
            for demo_file in demo_files[:demo_files_cnt]: 
                source_imgs.append(open(demo_file, 'rb'))
        else:
            caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
            
        for source_img in source_imgs:
            img= PIL.Image.open(source_img)
            uploaded_images.append(img)
            caption= source_img.name
            st.image(img, caption=caption, use_column_width=True)
    except Exception as ex:
        st.error("Error occurred while opening the image.")
        st.error(ex)

with col2:
    for uploaded_image in uploaded_images:
        res = model.predict(uploaded_image,
                            conf=confidence
                            )
        boxes = res[0].boxes
        res_plotted = res[0].plot()[:, :, ::-1]
        caption= '–î–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
        if len(boxes)>0:
            caption=f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {str(len(boxes))}'
        st.image(res_plotted, caption= caption,
                 use_column_width=True)



      
